import com.google.auth.oauth2.GoogleCredentials;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ServerValue;

import java.io.FileInputStream;
import java.util.concurrent.TimeUnit;

import static java.lang.System.exit;

public class Main {
    /**
     * @link https://firebase.google.com/docs/admin/setup#initialize_the_sdk
     */
    private static void initFirebase() {
        try {
            FileInputStream serviceAccount = new FileInputStream(System.getenv("GOOGLE_APPLICATION_CREDENTIALS"));
            FirebaseOptions options = new FirebaseOptions.Builder()
                    .setCredentials(GoogleCredentials.fromStream(serviceAccount))
                    .setDatabaseUrl("https://buzzwordmap.firebaseio.com")
                    .build();
            FirebaseApp.initializeApp(options);
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("initFirebase failed. You probably forgot to download the firebase private key file " +
                    "and/or set the environment variable $GOOGLE_APPLICATION_CREDENTIALS to its directory. \n\n" +
                    "See https://firebase.google.com/docs/admin/setup#initialize_the_sdk for more information.");
            exit(1);
        }
    }

    public static void main(String[] args) {
        initFirebase();

        while (true) {
            // Pushes a timestamp at database reference "test/potato"
            // with an autogenerated (sortable by entry order key)
            // every 5 minutes
            // Links:
            //  - https://firebase.google.com/docs/database/admin/start
            //  - https://firebase.google.com/docs/database/admin/save-data
            try {
                DatabaseReference ref = FirebaseDatabase.getInstance().getReference("test/potato");
                ref.push().setValueAsync(ServerValue.TIMESTAMP);
                TimeUnit.MINUTES.sleep(5);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        // Initialise link manager with initial to visit link(s)
//        LinkManager linkManager = new LinkManager("source.txt");
//        // Start timer for termination of program
//        Timer.getInstance();
//
//        // Create at most 10 parallel tasks
//        int concurrent = Math.min(10, linkManager.numToVisit());
//        List<CrawlerTask> tasks = new ArrayList<>();
//        while (concurrent-- > 0) {
//            tasks.add(new CrawlerTask(linkManager));
//        }
//        // Fork all tasks and wait
//        ForkJoinTask.invokeAll(tasks);
    }
}
